@page "/"
@using FoodHealthChecker.Components.Layout
@using FoodHealthChecker
@using Markdig
@using Microsoft.AspNetCore.Components
@using System.Runtime.CompilerServices
@implements IDisposable

<PageTitle> Food Health Checker</PageTitle>

<div class="container mt-2">
    <h3 class="card-title mb-2 fw-bold">AI Food Health Checker</h3>
    <div class="row justify-content-center ">
        <div class="col-xl-12">
            @if (!string.IsNullOrEmpty(errorMessage))
            {
                <div class="alert alert-danger mt-0">@errorMessage</div>
            }
        </div>
        <div class="col-xl-4">
            <div class="card common-card-height">
                <div class="card-body">
                    <h4 class="card-title fw-bold required text-start">Image URL</h4>
                    <div class="form-group mb-3">
                        <InputText class="form-control" @bind-Value="ImageUrl" id="imageUrl" placeholder="Enter the food package image URL" />
                    </div>
                    <div class="form-group mb-3">
                        <button class="btn btn-primary w-100" @onclick="CheckHealth" disabled="@(isProcessingResponse || isProcessingIngredients)">Check Health</button>
                    </div>

                    @if (!string.IsNullOrWhiteSpace(ImageUrl))
                    {
                        <img src="@ImageUrl" alt="Preview Image" class="img-fluid rounded" style="max-height: 150px;" />
                    }
                </div>
            </div>
        </div>
        <div class="col-xl-8">
            <div class="card common-card-height">
                <div class="card-body">
                    <h4 class="card-title text-start ">Food Contents</h4>
                    @if (isProcessingIngredients)
                    {
                        <div class="d-flex justify-content-center">
                            <div class="spinner-border text-primary" role="status">
                                <span class="visually-hidden">Loading...</span>
                            </div>
                        </div>
                    }
                    else
                    {
                        <p class="text-lg-start ai-ingredients-response">
                            @((MarkupString)Markdig.Markdown.ToHtml(Ingredients, pipeline))
                        </p>
                    }
                </div>
            </div>
        </div>
    </div>
    <div class="row justify-content-center mt-2">
        <div class="col-xl-12">
            <div class="card ">
                <div class="card-body">
                    <h4 class="card-title text-start">Final Verdict</h4>
                    @if (isProcessingResponse)
                    {
                        <div class="d-flex justify-content-center">
                            <div class="spinner-border text-primary" role="status">
                                <span class="visually-hidden">Loading...</span>
                            </div>
                        </div>
                    }
                    else
                    {
                        <p class="text-lg-start ai-response">
                            @((MarkupString)Markdown.ToHtml(Result, pipeline))
                        </p>
                    }
                </div>
            </div>
            <div class="alert alert-warning text-center fw-bold mb-0" role="alert">
                Warning: The content generated by AI can be inaccurate.
            </div>
        </div>
    </div>
</div>

@code {
    public string ImageUrl { get; set; } = string.Empty;
    public string Ingredients { get; set; } = string.Empty;
    public string Result { get; set; } = string.Empty;
    
    [Inject]
    public MarkdownPipeline pipeline { get; set; }
    [Inject]
    public FoodCheckerService _foodCheckerService { get; set; }

    private bool isProcessingIngredients = false;
    private bool isProcessingResponse = false;
    private string errorMessage = string.Empty;
    private CancellationTokenSource _cts = new CancellationTokenSource();

    private async Task CheckHealth()
    {

        isProcessingIngredients = true;
        errorMessage = string.Empty;
        Result = string.Empty;
        Ingredients = string.Empty;
        if (!Uri.IsWellFormedUriString(ImageUrl, UriKind.Absolute))
        {
            errorMessage = "Invalid URL";
            isProcessingIngredients = false;
            await InvokeAsync(() => this.StateHasChanged());
            return;
        }
        try
        {
            await foreach (var response in _foodCheckerService.GetIngredirentsAsync(ImageUrl, _cts.Token))
            {
                isProcessingIngredients = false;
                Ingredients += response;
                await InvokeAsync(() => this.StateHasChanged());
            }
            if (Ingredients == "<|ERROR|>")
            {
                Ingredients = Ingredients.Replace("<|ERROR|>", "Not Found");
                errorMessage = "Failed to get ingredients";
            }
            else
            {
                if (Ingredients.Contains("<|ERROR|>"))
                {
                    Ingredients = Ingredients.Replace("<|ERROR|>", "Not Found");
                }

                isProcessingResponse = true;
                await InvokeAsync(() => this.StateHasChanged());

                await foreach (var response in _foodCheckerService.CheckFoodHealthAsync(Ingredients, _cts.Token))
                {
                    isProcessingResponse = false;
                    Result += response;
                    await InvokeAsync(() => this.StateHasChanged());
                }
            }
        }
        catch (Exception ex)
        {
            Console.WriteLine(ex.Message);
            errorMessage = $"Error: An unexpected error has occurred";
        }
        finally
        {
            isProcessingResponse = false;
            isProcessingIngredients = false;
        }
    }

    public void Dispose()
    {
        _cts.Cancel();
        _cts.Dispose();
    }

}
